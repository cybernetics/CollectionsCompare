package maps.entity;

import org.joda.beans.Bean;
import org.joda.beans.BeanDefinition;
import org.joda.beans.PropertyDefinition;
import java.util.Map;
import java.util.Set;
import org.joda.beans.BeanBuilder;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaProperty;
import org.joda.beans.Property;
import org.joda.beans.impl.direct.DirectBeanBuilder;
import org.joda.beans.impl.direct.DirectMetaBean;
import org.joda.beans.impl.direct.DirectMetaProperty;
import org.joda.beans.impl.direct.DirectMetaPropertyMap;

@BeanDefinition
public class Connection implements Bean {

    @PropertyDefinition(validate = "notNull")
    private Node from;

    @PropertyDefinition(validate = "notNull")
    private Node to;

    @PropertyDefinition(validate = "notNull")
    private Double distance;

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((from == null) ? 0 : from.hashCode());
        result = prime * result + ((to == null) ? 0 : to.hashCode());
        return result;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        Connection other = (Connection) obj;
        if (from == null) {
            if (other.from != null)
                return false;
        } else if (!from.equals(other.from))
            return false;
        if (to == null) {
            if (other.to != null)
                return false;
        } else if (!to.equals(other.to))
            return false;
        return true;
    }
    //------------------------- AUTOGENERATED START -------------------------
    ///CLOVER:OFF
    /**
     * The meta-bean for {@code Connection}.
     * @return the meta-bean, not null
     */
    public static Connection.Meta meta() {
        return Connection.Meta.INSTANCE;
    }

    static {
        JodaBeanUtils.registerMetaBean(Connection.Meta.INSTANCE);
    }

    @Override
    public Connection.Meta metaBean() {
        return Connection.Meta.INSTANCE;
    }

    @Override
    public <R> Property<R> property(String propertyName) {
        return metaBean().<R>metaProperty(propertyName).createProperty(this);
    }

    @Override
    public Set<String> propertyNames() {
        return metaBean().metaPropertyMap().keySet();
    }

    //-----------------------------------------------------------------------
    /**
     * Gets the from.
     * @return the value of the property, not null
     */
    public Node getFrom() {
        return from;
    }

    /**
     * Sets the from.
     * @param from  the new value of the property, not null
     */
    public void setFrom(Node from) {
        JodaBeanUtils.notNull(from, "from");
        this.from = from;
    }

    /**
     * Gets the the {@code from} property.
     * @return the property, not null
     */
    public final Property<Node> from() {
        return metaBean().from().createProperty(this);
    }

    //-----------------------------------------------------------------------
    /**
     * Gets the to.
     * @return the value of the property, not null
     */
    public Node getTo() {
        return to;
    }

    /**
     * Sets the to.
     * @param to  the new value of the property, not null
     */
    public void setTo(Node to) {
        JodaBeanUtils.notNull(to, "to");
        this.to = to;
    }

    /**
     * Gets the the {@code to} property.
     * @return the property, not null
     */
    public final Property<Node> to() {
        return metaBean().to().createProperty(this);
    }

    //-----------------------------------------------------------------------
    /**
     * Gets the distance.
     * @return the value of the property, not null
     */
    public Double getDistance() {
        return distance;
    }

    /**
     * Sets the distance.
     * @param distance  the new value of the property, not null
     */
    public void setDistance(Double distance) {
        JodaBeanUtils.notNull(distance, "distance");
        this.distance = distance;
    }

    /**
     * Gets the the {@code distance} property.
     * @return the property, not null
     */
    public final Property<Double> distance() {
        return metaBean().distance().createProperty(this);
    }

    //-----------------------------------------------------------------------
    @Override
    public Connection clone() {
        return JodaBeanUtils.cloneAlways(this);
    }

    @Override
    public String toString() {
        StringBuilder buf = new StringBuilder(128);
        buf.append("Connection{");
        int len = buf.length();
        toString(buf);
        if (buf.length() > len) {
            buf.setLength(buf.length() - 2);
        }
        buf.append('}');
        return buf.toString();
    }

    protected void toString(StringBuilder buf) {
        buf.append("from").append('=').append(JodaBeanUtils.toString(getFrom())).append(',').append(' ');
        buf.append("to").append('=').append(JodaBeanUtils.toString(getTo())).append(',').append(' ');
        buf.append("distance").append('=').append(JodaBeanUtils.toString(getDistance())).append(',').append(' ');
    }

    //-----------------------------------------------------------------------
    /**
     * The meta-bean for {@code Connection}.
     */
    public static class Meta extends DirectMetaBean {
        /**
         * The singleton instance of the meta-bean.
         */
        static final Meta INSTANCE = new Meta();

        /**
         * The meta-property for the {@code from} property.
         */
        private final MetaProperty<Node> from = DirectMetaProperty.ofReadWrite(
                this, "from", Connection.class, Node.class);
        /**
         * The meta-property for the {@code to} property.
         */
        private final MetaProperty<Node> to = DirectMetaProperty.ofReadWrite(
                this, "to", Connection.class, Node.class);
        /**
         * The meta-property for the {@code distance} property.
         */
        private final MetaProperty<Double> distance = DirectMetaProperty.ofReadWrite(
                this, "distance", Connection.class, Double.class);
        /**
         * The meta-properties.
         */
        private final Map<String, MetaProperty<?>> metaPropertyMap$ = new DirectMetaPropertyMap(
                this, null,
                "from",
                "to",
                "distance");

        /**
         * Restricted constructor.
         */
        protected Meta() {
        }

        @Override
        protected MetaProperty<?> metaPropertyGet(String propertyName) {
            switch (propertyName.hashCode()) {
                case 3151786:  // from
                    return from;
                case 3707:  // to
                    return to;
                case 288459765:  // distance
                    return distance;
            }
            return super.metaPropertyGet(propertyName);
        }

        @Override
        public BeanBuilder<? extends Connection> builder() {
            return new DirectBeanBuilder<Connection>(new Connection());
        }

        @Override
        public Class<? extends Connection> beanType() {
            return Connection.class;
        }

        @Override
        public Map<String, MetaProperty<?>> metaPropertyMap() {
            return metaPropertyMap$;
        }

        //-----------------------------------------------------------------------
        /**
         * The meta-property for the {@code from} property.
         * @return the meta-property, not null
         */
        public final MetaProperty<Node> from() {
            return from;
        }

        /**
         * The meta-property for the {@code to} property.
         * @return the meta-property, not null
         */
        public final MetaProperty<Node> to() {
            return to;
        }

        /**
         * The meta-property for the {@code distance} property.
         * @return the meta-property, not null
         */
        public final MetaProperty<Double> distance() {
            return distance;
        }

        //-----------------------------------------------------------------------
        @Override
        protected Object propertyGet(Bean bean, String propertyName, boolean quiet) {
            switch (propertyName.hashCode()) {
                case 3151786:  // from
                    return ((Connection) bean).getFrom();
                case 3707:  // to
                    return ((Connection) bean).getTo();
                case 288459765:  // distance
                    return ((Connection) bean).getDistance();
            }
            return super.propertyGet(bean, propertyName, quiet);
        }

        @Override
        protected void propertySet(Bean bean, String propertyName, Object newValue, boolean quiet) {
            switch (propertyName.hashCode()) {
                case 3151786:  // from
                    ((Connection) bean).setFrom((Node) newValue);
                    return;
                case 3707:  // to
                    ((Connection) bean).setTo((Node) newValue);
                    return;
                case 288459765:  // distance
                    ((Connection) bean).setDistance((Double) newValue);
                    return;
            }
            super.propertySet(bean, propertyName, newValue, quiet);
        }

        @Override
        protected void validate(Bean bean) {
            JodaBeanUtils.notNull(((Connection) bean).from, "from");
            JodaBeanUtils.notNull(((Connection) bean).to, "to");
            JodaBeanUtils.notNull(((Connection) bean).distance, "distance");
        }

    }

    ///CLOVER:ON
    //-------------------------- AUTOGENERATED END --------------------------
}
